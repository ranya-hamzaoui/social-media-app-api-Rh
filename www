#!/usr/bin/env node
var app = require('./app');
var debug = require('debug')('social-media-web-server:server');
var http = require('http');
var config = require('../config/server');
let logger = require('../middlewares/logger');

var port = 3000;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

if (config.nodeEnv === 'production') {
  process.on('uncaughtException', onUncaughtException);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      debug(bind + ' requires elevated privileges');
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      debug(bind + ' is already in use');
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
  logger.debug('Listening on ' + bind);
}
/** 
 * Event Handler for uncaught exception(explicit or implicit)
 */
function onUncaughtException(er) {
  logger.error(er.stack, {
    service: 'SERVER'
  });
  /**
   * TODO: 
   * send an alert by mail with the stack trace 
   * and other pertinent process information before shutting down
   */
  process.exit(1)
}